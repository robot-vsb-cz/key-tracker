<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>